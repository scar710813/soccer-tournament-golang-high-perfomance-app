// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jairogloz/go-l/pkg/ports (interfaces: TeamRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_team_repository.go -package=mocks github.com/jairogloz/go-l/pkg/ports TeamRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/jairogloz/go-l/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTeamRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockTeamRepository) Get(arg0 context.Context, arg1 string) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTeamRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTeamRepository)(nil).Get), arg0, arg1)
}

// GetPlayers mocks base method.
func (m *MockTeamRepository) GetPlayers(arg0 context.Context, arg1 string) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", arg0, arg1)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers.
func (mr *MockTeamRepositoryMockRecorder) GetPlayers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockTeamRepository)(nil).GetPlayers), arg0, arg1)
}

// Insert mocks base method.
func (m *MockTeamRepository) Insert(arg0 context.Context, arg1 *domain.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTeamRepositoryMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTeamRepository)(nil).Insert), arg0, arg1)
}
